type Query {
    """ queries all authors """
    author_findAll: [Author]

    """
    Finds the author with the given id.

    Returns null if no author was found
    """
    author_findById(id: ID): Author

    """
    Returns authors which matches the given search criteria.
    """
    author_search(searchCriteria: AuthorSearchCriteria): [Author]
}

"""
Can be used to search one or more authors
"""
input AuthorSearchCriteria {
    authorId: ID
    firstName: String
    lastName: String
}

# Defined in the shows module
type Show @key(fields: "id") @extends {
    id: ID @external
    authors: [Author]
}


""" Author of a show """
type Author @key(fields: "id") {
    """ Author Id """
    id: ID!

    """ Fullname of the author """
    name: String @deprecated(reason: "Use fullName instead")

    """ First name of the author """
    firstName: String

    """ Last name of the author """
    lastName: String

    """ Full name of the author """
    fullName: String
}

# (Subgraph schemas include this to opt in to Federation 2 features.)
extend schema @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@shareable", "@extends", "@external"])