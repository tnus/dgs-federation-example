schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Author
  @join__type(graph: AUTHORS)
{
  name: String
}

scalar join__FieldSet

enum join__Graph {
  AUTHORS @join__graph(name: "authors", url: "http://host.docker.internal:8082/graphql")
  REVIEWS @join__graph(name: "reviews", url: "http://host.docker.internal:8081/graphql")
  SHOWS @join__graph(name: "shows", url: "http://host.docker.internal:8080/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: AUTHORS)
  @join__type(graph: REVIEWS)
  @join__type(graph: SHOWS)
{
  authors: [Author] @join__field(graph: AUTHORS)
  shows(titleFilter: String): [Show] @join__field(graph: SHOWS)
}

type Review
  @join__type(graph: REVIEWS)
{
  starRating: Int
}

type Show
  @join__type(graph: AUTHORS, key: "id", extension: true)
  @join__type(graph: REVIEWS, key: "id", extension: true)
  @join__type(graph: SHOWS, key: "id")
{
  id: ID
  authors: [Author] @join__field(graph: AUTHORS)
  reviews: [Review] @join__field(graph: REVIEWS)
  title: String @join__field(graph: SHOWS)
  releaseYear: Int @join__field(graph: SHOWS)
}
